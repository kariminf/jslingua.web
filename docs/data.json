{
    "project": {
        "name": "JsLingua API",
        "description": "Language processing API",
        "version": "0.4.4",
        "url": "http://kariminf.github.io/jslingua/"
    },
    "files": {
        "ara/ara.info.js": {
            "name": "ara/ara.info.js",
            "modules": {},
            "classes": {
                "AraInfo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "ara/ara.lang.js": {
            "name": "ara/ara.lang.js",
            "modules": {},
            "classes": {
                "AraLang": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "ara/ara.trans.js": {
            "name": "ara/ara.trans.js",
            "modules": {},
            "classes": {
                "AraTrans": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "docs/docs/assets/vendor/bootstrap/js/bootstrap.min.js": {
            "name": "docs/docs/assets/vendor/bootstrap/js/bootstrap.min.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "eng/eng.info.js": {
            "name": "eng/eng.info.js",
            "modules": {},
            "classes": {
                "EngInfo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "eng/eng.lang.js": {
            "name": "eng/eng.lang.js",
            "modules": {},
            "classes": {
                "EngLang": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "eng/eng.trans.js": {
            "name": "eng/eng.trans.js",
            "modules": {},
            "classes": {
                "EngTrans": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "jpn/jpn.info.js": {
            "name": "jpn/jpn.info.js",
            "modules": {},
            "classes": {
                "JpnInfo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "jpn/jpn.lang.js": {
            "name": "jpn/jpn.lang.js",
            "modules": {},
            "classes": {
                "JpnLang": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "jpn/jpn.morpho.js": {
            "name": "jpn/jpn.morpho.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "jpn/jpn.trans.js": {
            "name": "jpn/jpn.trans.js",
            "modules": {},
            "classes": {
                "JpnTrans": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "info.js": {
            "name": "info.js",
            "modules": {},
            "classes": {
                "Info": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "jslingua.js": {
            "name": "jslingua.js",
            "modules": {},
            "classes": {
                "JsLingua": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lang.js": {
            "name": "lang.js",
            "modules": {},
            "classes": {
                "Lang": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "morpho.js": {
            "name": "morpho.js",
            "modules": {},
            "classes": {
                "Morpho": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tools.js": {
            "name": "tools.js",
            "modules": {
                "Tools": 1
            },
            "classes": {
                "Tools": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "trans.js": {
            "name": "trans.js",
            "modules": {
                "JsLingua": 1
            },
            "classes": {
                "Trans": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "JsLingua": {
            "name": "JsLingua",
            "submodules": {
                "undefined": 1
            },
            "elements": {},
            "classes": {
                "Trans": 1,
                "AraInfo": 1,
                "AraLang": 1,
                "AraTrans": 1,
                "EngInfo": 1,
                "EngLang": 1,
                "EngTrans": 1,
                "JpnInfo": 1,
                "JpnLang": 1,
                "JpnTrans": 1,
                "Info": 1,
                "JsLingua": 1,
                "Lang": 1,
                "Morpho": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "trans.js",
            "line": 30,
            "description": "translateration of the language words"
        },
        "Tools": {
            "name": "Tools",
            "submodules": {},
            "elements": {},
            "classes": {
                "Tools": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "tools.js",
            "line": 6,
            "description": "The tools module"
        }
    },
    "classes": {
        "AraInfo": {
            "name": "AraInfo",
            "shortname": "AraInfo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "ara/ara.info.js",
            "line": 12,
            "description": "Contains information about Arabic language",
            "extends": "Info",
            "is_constructor": 1
        },
        "AraLang": {
            "name": "AraLang",
            "shortname": "AraLang",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "ara/ara.lang.js",
            "line": 12,
            "description": "Contains Arabic charsets and transformations",
            "extends": "Lang",
            "is_constructor": 1
        },
        "AraTrans": {
            "name": "AraTrans",
            "shortname": "AraTrans",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "ara/ara.trans.js",
            "line": 305,
            "description": "Arabic transliteration",
            "extends": "Trans",
            "is_constructor": 1
        },
        "EngInfo": {
            "name": "EngInfo",
            "shortname": "EngInfo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "eng/eng.info.js",
            "line": 12,
            "description": "Contains information about English language",
            "extends": "Info",
            "is_constructor": 1
        },
        "EngLang": {
            "name": "EngLang",
            "shortname": "EngLang",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "eng/eng.lang.js",
            "line": 12,
            "description": "Contains English charsets and transformations",
            "extends": "Lang",
            "is_constructor": 1
        },
        "EngTrans": {
            "name": "EngTrans",
            "shortname": "EngTrans",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "eng/eng.trans.js",
            "line": 139,
            "description": "English transliteration",
            "extends": "Trans",
            "is_constructor": 1
        },
        "JpnInfo": {
            "name": "JpnInfo",
            "shortname": "JpnInfo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "jpn/jpn.info.js",
            "line": 13,
            "description": "Contains information about Japanese language",
            "extends": "Info",
            "is_constructor": 1
        },
        "JpnLang": {
            "name": "JpnLang",
            "shortname": "JpnLang",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "jpn/jpn.lang.js",
            "line": 12,
            "description": "Contains Japanese charsets and transformations",
            "extends": "Lang",
            "is_constructor": 1
        },
        "JpnTrans": {
            "name": "JpnTrans",
            "shortname": "JpnTrans",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "jpn/jpn.trans.js",
            "line": 321,
            "description": "Japanese transliteration",
            "extends": "Trans",
            "is_constructor": 1
        },
        "Info": {
            "name": "Info",
            "shortname": "Info",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "info.js",
            "line": 9,
            "description": "Contains information about the specified language",
            "params": [
                {
                    "name": "langCode",
                    "description": "The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.",
                    "type": "String"
                }
            ]
        },
        "JsLingua": {
            "name": "JsLingua",
            "shortname": "JsLingua",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "namespace": "",
            "file": "jslingua.js",
            "line": 16,
            "description": "The main class"
        },
        "Lang": {
            "name": "Lang",
            "shortname": "Lang",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "namespace": "",
            "file": "lang.js",
            "line": 81,
            "description": "Language class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "langCode",
                    "description": "The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.",
                    "type": "String"
                }
            ]
        },
        "Morpho": {
            "name": "Morpho",
            "shortname": "Morpho",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "namespace": "",
            "file": "morpho.js",
            "line": 9,
            "description": "Morphology of a specific language",
            "is_constructor": 1,
            "params": [
                {
                    "name": "langCode",
                    "description": "Language ISO693-2 code: ara, jpn, eng, etc.",
                    "type": "String"
                }
            ]
        },
        "Tools": {
            "name": "Tools",
            "shortname": "Tools",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Tools",
            "namespace": "",
            "file": "tools.js",
            "line": 6,
            "description": "The tools class",
            "static": 1
        },
        "Trans": {
            "name": "Trans",
            "shortname": "Trans",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "namespace": "",
            "file": "trans.js",
            "line": 30,
            "description": "translateration of the language words",
            "is_constructor": 1,
            "params": [
                {
                    "name": "langCode",
                    "description": "the code of the language: ara, jpn, etc.",
                    "type": "String"
                }
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "ara/ara.lang.js",
            "line": 72,
            "description": "Transform from Arabic numbers to Arabic letters",
            "itemtype": "method",
            "name": "toArabicLetters",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "nbr",
                    "description": "the integer number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Arabic writing of numbers",
                "type": "String"
            },
            "class": "AraLang"
        },
        {
            "file": "ara/ara.trans.js",
            "line": 323,
            "description": "Arabic to morse normalization",
            "itemtype": "method",
            "name": "ar2morseNormalize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "Arabic text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized text",
                "type": "String"
            },
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.trans.js",
            "line": 338,
            "description": "pre-transliteration for morse: cleaning non supported codes",
            "itemtype": "method",
            "name": "morsePreTrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "Arabic text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "processed text for morse transliteration",
                "type": "String"
            },
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.trans.js",
            "line": 356,
            "description": "post-transliteration for morse: clean non morse characters",
            "itemtype": "method",
            "name": "morsePostTrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "morse code",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filtered morse code",
                "type": "String"
            },
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.trans.js",
            "line": 375,
            "description": "pre-untransliteration for morse: clean non morse characters",
            "itemtype": "method",
            "name": "morsePreUntrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "morse code",
                    "type": "String"
                }
            ],
            "return": {
                "description": "processed morse code for untransliteration",
                "type": "String"
            },
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.trans.js",
            "line": 393,
            "description": "post-untransliteration for morse",
            "itemtype": "method",
            "name": "morsePostUntrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "Arabic text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filtered Arabic text",
                "type": "String"
            },
            "class": "AraTrans"
        },
        {
            "file": "docs/docs/assets/vendor/bootstrap/js/bootstrap.min.js",
            "line": 1,
            "description": "Bootstrap.js by @fat & @mdo\nplugins: bootstrap-transition.js, bootstrap-modal.js, bootstrap-dropdown.js, bootstrap-scrollspy.js, bootstrap-tab.js, bootstrap-tooltip.js, bootstrap-popover.js, bootstrap-affix.js, bootstrap-alert.js, bootstrap-button.js, bootstrap-collapse.js, bootstrap-carousel.js, bootstrap-typeahead.js\nCopyright 2012 Twitter, Inc.\nhttp://www.apache.org/licenses/LICENSE-2.0.txt",
            "class": "EngInfo"
        },
        {
            "file": "eng/eng.lang.js",
            "line": 60,
            "description": "Transform from Arabic numbers to English letters",
            "itemtype": "method",
            "name": "toEnglishLetters",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "nbr",
                    "description": "the integer number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "English writing of numbers",
                "type": "String"
            },
            "class": "EngLang"
        },
        {
            "file": "eng/eng.lang.js",
            "line": 71,
            "description": "Transform from Arabic numbers to English letters",
            "itemtype": "method",
            "name": "toEnglishLetters2",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "nbr",
                    "description": "the integer number",
                    "type": "Number"
                },
                {
                    "name": "comma",
                    "description": "put a comma or not",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "English writing of numbers",
                "type": "String"
            },
            "class": "EngLang"
        },
        {
            "file": "eng/eng.trans.js",
            "line": 155,
            "description": "pre-transliteration for morse: cleaning non supported codes",
            "itemtype": "method",
            "name": "morsePreTrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "Arabic text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "processed text for morse transliteration",
                "type": "String"
            },
            "class": "EngTrans"
        },
        {
            "file": "eng/eng.trans.js",
            "line": 171,
            "description": "post-transliteration for morse: clean non morse characters",
            "itemtype": "method",
            "name": "morsePostTrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "morse code",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filtered morse code",
                "type": "String"
            },
            "class": "EngTrans"
        },
        {
            "file": "eng/eng.trans.js",
            "line": 190,
            "description": "pre-untransliteration for morse: clean non morse characters",
            "itemtype": "method",
            "name": "morsePreUntrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "morse code",
                    "type": "String"
                }
            ],
            "return": {
                "description": "processed morse code for untransliteration",
                "type": "String"
            },
            "class": "EngTrans"
        },
        {
            "file": "eng/eng.trans.js",
            "line": 208,
            "description": "post-untransliteration for morse",
            "itemtype": "method",
            "name": "morsePostUntrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "Arabic text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filtered Arabic text",
                "type": "String"
            },
            "class": "EngTrans"
        },
        {
            "file": "jpn/jpn.lang.js",
            "line": 53,
            "description": "Transform from Arabic numbers to Japanese letters",
            "itemtype": "method",
            "name": "toJapaneseLetters",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "num",
                    "description": "the integer number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Japanese writing of numbers",
                "type": "String"
            },
            "class": "JpnLang"
        },
        {
            "file": "jpn/jpn.morpho.js",
            "line": 83,
            "override": "[getPronounName description]",
            "params": [
                {
                    "name": "opts",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "JpnTrans"
        },
        {
            "file": "jpn/jpn.trans.js",
            "line": 490,
            "description": "kunreiShiki pre-transliteration function",
            "itemtype": "method",
            "name": "kunreiShikiPreTrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "Japanese text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Pre-tranliterated text",
                "type": "String"
            },
            "class": "JpnTrans"
        },
        {
            "file": "jpn/jpn.trans.js",
            "line": 504,
            "description": "kunreiShiki pre-untransliteration function",
            "itemtype": "method",
            "name": "kunreiShikiPreUntrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "Romanized text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Pre-untranliterated text",
                "type": "String"
            },
            "class": "JpnTrans"
        },
        {
            "file": "jpn/jpn.trans.js",
            "line": 519,
            "description": "Replace the doubled characters with a little \"tsu\" if different from \"n\"",
            "itemtype": "method",
            "name": "doubleReplace",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "The text to be replaced",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The same string but the repeated characters are replaced",
                "type": "String"
            },
            "class": "JpnTrans"
        },
        {
            "file": "jpn/jpn.trans.js",
            "line": 544,
            "description": "Transform xya to Japanese little 'tsu' followed by ya",
            "itemtype": "method",
            "name": "xya2Jap",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "Romanized text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "text with xya transformed to Japanese",
                "type": "String"
            },
            "class": "JpnTrans"
        },
        {
            "file": "jpn/jpn.trans.js",
            "line": 570,
            "description": "Replace the lone characters with their equivalent + \"u\"",
            "itemtype": "method",
            "name": "loneCharReplace",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "the text to be replaced",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The resulted text",
                "type": "String"
            },
            "class": "JpnTrans"
        },
        {
            "file": "info.js",
            "line": 41,
            "description": "Get the name of the language",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "the language name: arabic, english, japanese, etc.",
                "type": "String"
            },
            "class": "Info"
        },
        {
            "file": "info.js",
            "line": 50,
            "description": "Get the code of the language",
            "itemtype": "method",
            "name": "getCode",
            "return": {
                "description": "The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.",
                "type": "String"
            },
            "class": "Info"
        },
        {
            "file": "info.js",
            "line": 59,
            "description": "Get the family of the language",
            "itemtype": "method",
            "name": "getFamily",
            "return": {
                "description": "The language family: Afro-asiatic, Japonic, etc.",
                "type": "String"
            },
            "class": "Info"
        },
        {
            "file": "info.js",
            "line": 68,
            "description": "Get the branch of the language, if any",
            "itemtype": "method",
            "name": "getBranch",
            "return": {
                "description": "The language branch: semitic, etc.",
                "type": "String"
            },
            "class": "Info"
        },
        {
            "file": "info.js",
            "line": 77,
            "description": "Get the direction of writing of the language: ltr or rtl",
            "itemtype": "method",
            "name": "getDir",
            "return": {
                "description": "The language direction: left to right (ltr) or right to left (rtl)",
                "type": "String"
            },
            "class": "Info"
        },
        {
            "file": "info.js",
            "line": 86,
            "description": "Get the words order:\n<ul>\n<li>s: Subject</li>\n<li>v: Verb</li>\n<li>o: Object</li>\n</ul>\nFor example, English is \"svo\"",
            "itemtype": "method",
            "name": "getWordOrder",
            "return": {
                "description": "The words order in the language",
                "type": "String"
            },
            "class": "Info"
        },
        {
            "file": "jslingua.js",
            "line": 49,
            "description": "Contains the super-classes: Info, Lang, Trans, Morpho. <br>\nfor example, JsLingua.Cls.Info returns Info class",
            "itemtype": "attribute",
            "name": "Cls",
            "static": 1,
            "type": "{Object}",
            "class": "JsLingua",
            "module": "JsLingua"
        },
        {
            "file": "jslingua.js",
            "line": 70,
            "description": "Add a service for a specific language",
            "itemtype": "method",
            "name": "addService",
            "params": [
                {
                    "name": "serviceID",
                    "description": "The services name: \"Info\", \"Lang\", etc.",
                    "type": "String"
                },
                {
                    "name": "langCode",
                    "description": "The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.",
                    "type": "String"
                },
                {
                    "name": "theClass",
                    "description": "The class that affords the service",
                    "type": "Object"
                }
            ],
            "class": "JsLingua",
            "module": "JsLingua"
        },
        {
            "file": "jslingua.js",
            "line": 86,
            "description": "Get the codes of available languages of a given service",
            "itemtype": "method",
            "name": "serviceLanguages",
            "params": [
                {
                    "name": "serviceID",
                    "description": "The name of the service (the super-classe): \"Info\", \"Lang\", etc.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array of strings, with ISO639-2 codes",
                "type": "Array"
            },
            "class": "JsLingua",
            "module": "JsLingua"
        },
        {
            "file": "jslingua.js",
            "line": 97,
            "description": "Get the service class for a given language and service name.<br>\nFor example: JsLingua.getService(\"Info\", \"ara\") Gives a class AraInfo",
            "itemtype": "method",
            "name": "getService",
            "params": [
                {
                    "name": "serviceID",
                    "description": "The name of the service (the super-classe): \"Info\", \"Lang\", etc.",
                    "type": "String"
                },
                {
                    "name": "langCode",
                    "description": "The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The class that affords the service",
                "type": "Object"
            },
            "class": "JsLingua",
            "module": "JsLingua"
        },
        {
            "file": "jslingua.js",
            "line": 115,
            "description": "To recover the direction of writing for the given language <br>\nThis can be done using the info.js instance of the target language.\nBut, the direction is used a lot for presentation, so a centralized\nversion is to be afforded, so we don't import the js file for each\nlanguage in each webpage.",
            "params": [
                {
                    "name": "langCode",
                    "description": "The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "either \"rtl\" or \"ltr\"",
                "type": "String"
            },
            "class": "JsLingua",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 9,
            "description": "Returns unicode",
            "itemtype": "method",
            "name": "getUnicode",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "char",
                    "description": "a character or a unicode int",
                    "type": "String, Number"
                }
            ],
            "return": {
                "description": "returns the same number or the unicode of the first character",
                "type": "Number"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 27,
            "description": "Returns another method to verify if a character's unicode is between\ntwo unicode numbers min and max",
            "itemtype": "method",
            "name": "isBetween",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "min",
                    "description": "minimum unicode (included)",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "maximum unicode (included)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "function with char as parameter and returns a boolean",
                "type": "Function"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 100,
            "description": "Add char sets of a language",
            "itemtype": "method",
            "name": "addCharSet",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "setName",
                    "description": "CharSet name, for example: hiragana, kanji, Arabic suppliment",
                    "type": "String"
                },
                {
                    "name": "begin",
                    "description": "integer value: begining of the charSet",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "integer value: end of the charSet",
                    "type": "Number"
                }
            ],
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 113,
            "description": "Creates a new transformation method",
            "itemtype": "method",
            "name": "addTransform",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "transName",
                    "description": "transformation name (function name), for example: hiragana2Katakana",
                    "type": "String"
                },
                {
                    "name": "offset",
                    "description": "the number we add to the char's unicodes to get the new character",
                    "type": "Number"
                },
                {
                    "name": "origCharSet",
                    "description": "The name of the charset",
                    "type": "String"
                }
            ],
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 139,
            "description": "Returns the available charsets for the current language",
            "itemtype": "method",
            "name": "availableCharSets",
            "return": {
                "description": "a set of strings containing the names of charsets",
                "type": "Array"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 148,
            "description": "Returns the available transformations for the current language",
            "itemtype": "method",
            "name": "availableTransformations",
            "return": {
                "description": "a set of strings containing the names of transformation functions",
                "type": "Array"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 157,
            "description": "Returns the transformation function",
            "itemtype": "method",
            "name": "transformationFunction",
            "params": [
                {
                    "name": "transName",
                    "description": "transformation name (function name), for example: hiragana2Katakana",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a function which takes a string and transforme it to another string with different charset",
                "type": "Function"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 171,
            "description": "Returns a function which verifies if a char belongs to a charset or not",
            "itemtype": "method",
            "name": "verifyCharSetFunction",
            "params": [
                {
                    "name": "setName",
                    "description": "CharSet name, for example: hiragana, kanji, Arabic suppliment",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A function which takes a char and returns true if it belongs to the charset",
                "type": "Function"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 185,
            "description": "Returns a function which verifies if a string contains at least one character which belongs to a charset",
            "itemtype": "method",
            "name": "containsCharSetFunction",
            "params": [
                {
                    "name": "setName",
                    "description": "CharSet name, for example: hiragana, kanji, Arabic suppliment",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A function which takes a string and returns true if one of its characters belongs to the charset",
                "type": "Function"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 195,
            "description": "Returns a function which verifies if all string's characters belong to a charset",
            "itemtype": "method",
            "name": "allCharSetFunction",
            "params": [
                {
                    "name": "setName",
                    "description": "CharSet name, for example: hiragana, kanji, Arabic suppliment",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A function which takes a string and returns true if all of its characters belong to the charset",
                "type": "Function"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 205,
            "description": "Returns the code of the language",
            "itemtype": "method",
            "name": "getCode",
            "return": {
                "description": "The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.",
                "type": "String"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 214,
            "description": "A function which returns the pronounciation of a number in the destination\nlanguage (this must be overriden)",
            "itemtype": "method",
            "name": "pronounceNumber",
            "params": [
                {
                    "name": "num",
                    "description": "A number to be transformed into letters",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the pronounciation",
                "type": "String"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 27,
            "description": "A debugging function which do nothing",
            "itemtype": "method",
            "name": "dummyDebug",
            "access": "private",
            "tagname": "",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 34,
            "description": "A debugging function which pushes the arguments to the cosoles log",
            "itemtype": "method",
            "name": "realDebug",
            "access": "private",
            "tagname": "",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 45,
            "description": "The part of speech: Noun, Verb, Adjective,\nAdverb, Preposition, Pronoun",
            "access": "Morpho.Feature.POS",
            "itemtype": "attribute",
            "name": "PoS",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 63,
            "description": "The tense: Past, Present, Future",
            "access": "Morpho.Feature.Tense",
            "itemtype": "attribute",
            "name": "Tense",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 77,
            "description": "The aspect: Simple, Continuous, Perfect, PerfectContinuous",
            "access": "Morpho.Feature.Aspect",
            "itemtype": "attribute",
            "name": "Aspect",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 92,
            "description": "The mood: Indicative, Subjunctive, Conditional,\nOptative, Imperative, Jussive, Potential,\nHypothetical, Inferential",
            "access": "Morpho.Feature.Mood",
            "itemtype": "attribute",
            "name": "Mood",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 114,
            "description": "The voice: Active,Passive, Middle",
            "access": "Morpho.Feature.Voice",
            "itemtype": "attribute",
            "name": "Voice",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 128,
            "description": "The number: Singular, Dual, Plural",
            "access": "Morpho.Feature.Number",
            "itemtype": "attribute",
            "name": "Num",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 142,
            "description": "The case: Nominative, Accusative, Genitive, Dative,\nPrepositional, Ablative, Instrumental, Vocative",
            "access": "Morpho.Feature.Case",
            "itemtype": "attribute",
            "name": "Case",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 162,
            "description": "The person: First, Second, Third.",
            "access": "Morpho.Feature.Person",
            "itemtype": "attribute",
            "name": "Person",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 176,
            "description": "The gender: Masculine, Feminine, Neuter.",
            "access": "Morpho.Feature.Gender",
            "itemtype": "attribute",
            "name": "Gender",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 190,
            "description": "This is a map to different morphology features:\n<ul>\n<li>POS</li>\n<li>Tense</li>\n<li>Aspect</li>\n<li>Mood</li>\n<li>Voice</li>\n<li>Number: It returns <a href=\"#attr_Num\">Num</a></li>\n<li>Case: It returns <a href=\"#attr_Case\">Case</a></li>\n<li>Person: It returns <a href=\"#attr_Person\">Person</a></li>\n<li>Gender: It returns <a href=\"#attr_Gender\">Gender</a></li>\n</ul>\nWe can access these features either by:<br>\nMorpho.Feature.feature_name <br>\nOr: <br>\nMorpho.Feature[\"feature_name\"]",
            "itemtype": "attribute",
            "name": "Feature",
            "access": "Morpho.Feature",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 231,
            "description": "Add new stemmer method",
            "itemtype": "method",
            "name": "newStemmer",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "stemmerName",
                    "description": "the name of the stemmer",
                    "type": "String"
                },
                {
                    "name": "stemmerDesc",
                    "description": "the description of the stemmer",
                    "type": "String"
                },
                {
                    "name": "stemmerFct",
                    "description": "the function stem(word)",
                    "type": "Function"
                }
            ],
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 253,
            "description": "Enables the debugging messages",
            "itemtype": "method",
            "name": "enableDebug",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 261,
            "description": "disables the debugging messages",
            "itemtype": "method",
            "name": "disableDebug",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 269,
            "description": "Sets the current stemmer",
            "itemtype": "method",
            "name": "setCurrentStemmer",
            "params": [
                {
                    "name": "StemmerName",
                    "description": "stemmer method's name",
                    "type": "String"
                }
            ],
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 280,
            "description": "Returns the list of available stemming methods",
            "itemtype": "method",
            "name": "availableStemmers",
            "return": {
                "description": "Array of Strings containing stemmers names",
                "type": "Array"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 289,
            "description": "This method is used to recover the name of the tense",
            "params": [
                {
                    "name": "tense",
                    "description": "the tense which we want to get the name",
                    "type": "Tense"
                }
            ],
            "return": {
                "description": "the name of the tense in the selected language",
                "type": "String"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 308,
            "description": "This method is used to get personal pronouns characteristics",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getPronounOpts",
            "return": {
                "description": "Array of different objects; each object contains the properties\nof pronouns. For example: {person: Morpho.Feature.Person.First, number: Morpho.Feature.Number.Singular}\nwhich refers to the personal pronoun \"I\"",
                "type": "Array"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 320,
            "description": "This function returns an array of available tenses",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getTenses",
            "return": {
                "description": "Array of tenses available for the language",
                "type": "Array"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 334,
            "description": "This function is used for verb conjugation",
            "itemtype": "method",
            "name": "conjugate",
            "params": [
                {
                    "name": "verb",
                    "description": "the word to be conjugated",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "options for tense, case, voice, aspect, person, number, gender, mood, and other",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "inflected word",
                "type": "String"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 345,
            "description": "Get the personal pronoun using options like: person, gender, etc.<br>\nfor example, the parameters for the personal pronoun \"I\": <br>\n```\n   {\n     person: Morpho.Feature.Person.First,\n     number: Morpho.Feature.Number.Singular\n   }\n```",
            "itemtype": "method",
            "name": "getPronounName",
            "params": [
                {
                    "name": "opts",
                    "description": "An object containing parameters: person, gender, number.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the pronoun",
                "type": "String"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 362,
            "description": "This function is used for noun inflexion<br>\nFor example: noun to plural nouns",
            "itemtype": "method",
            "name": "declenseNoun",
            "params": [
                {
                    "name": "noun",
                    "description": "the noun to be inflected",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "the options: number for example",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the inflected noun",
                "type": "String"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 374,
            "description": "Stem a word: delete prefixes, suffixes and infixes",
            "itemtype": "method",
            "name": "stem",
            "params": [
                {
                    "name": "word",
                    "description": "the word to be stemmed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "stemmed word",
                "type": "String"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 387,
            "description": "lemmatize a word: return it to its origin",
            "itemtype": "method",
            "name": "lemmatize",
            "params": [
                {
                    "name": "word",
                    "description": "the word to be lemmatized",
                    "type": "String"
                }
            ],
            "return": {
                "description": "lemmatized word",
                "type": "String"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "tools.js",
            "line": 12,
            "description": "Read morse code and output as sound <br>\nExample: readMorse(\"..-. .--   ..-.\");",
            "itemtype": "method",
            "name": "readMorse",
            "params": [
                {
                    "name": "morse",
                    "description": "morse code written using \".\", \"-\" and blacks \" \".",
                    "type": "String"
                }
            ],
            "class": "Tools",
            "module": "Tools"
        },
        {
            "file": "tools.js",
            "line": 57,
            "description": "Transform HTML reserved characters to their equivalent codes in HTML.<br>\nfor example: \"<\" is transformed to \"&lt;\".",
            "itemtype": "method",
            "name": "htmlEntities",
            "params": [
                {
                    "name": "str",
                    "description": "normal string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "skip string",
                "type": "String"
            },
            "class": "Tools",
            "module": "Tools"
        },
        {
            "file": "trans.js",
            "line": 9,
            "description": "This function returns another function which do the transformation",
            "itemtype": "method",
            "name": "getTransliterator",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "srcTbl",
                    "description": "array which contains the source strings",
                    "type": "Array"
                },
                {
                    "name": "dstTbl",
                    "description": "array which contains the destination strings",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "a function which takes a string and transforme it using\nsrcTbl and dstTbl",
                "type": "Function"
            },
            "class": "Trans",
            "module": "Tools"
        },
        {
            "file": "trans.js",
            "line": 50,
            "description": "Add new transliteration method using two parallele tables",
            "itemtype": "method",
            "name": "newMethod",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "methodName",
                    "description": "the name of the method",
                    "type": "String"
                },
                {
                    "name": "langTbl",
                    "description": "array of strigs, the languages characters",
                    "type": "Array"
                },
                {
                    "name": "transTbl",
                    "description": "array of strigs, their respective representations",
                    "type": "Array"
                }
            ],
            "class": "Trans",
            "module": "JsLingua"
        },
        {
            "file": "trans.js",
            "line": 75,
            "description": "Set transliteration methods directly",
            "itemtype": "method",
            "name": "setTransUntrasMethods",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "methodName",
                    "description": "the name of the method",
                    "type": "String"
                },
                {
                    "name": "trans",
                    "description": "function of transliteration",
                    "type": "Function"
                },
                {
                    "name": "untrans",
                    "description": "function of untransliteration",
                    "type": "Function"
                }
            ],
            "class": "Trans",
            "module": "JsLingua"
        },
        {
            "file": "trans.js",
            "line": 95,
            "description": "add pre- and post-transliteration functions to a method",
            "itemtype": "method",
            "name": "addTransPrePostMethods",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "methodName",
                    "description": "the name of the method",
                    "type": "String"
                },
                {
                    "name": "preFunc",
                    "description": "function that executes before transliteration;\nIt takes a string and returns a string",
                    "type": "Function"
                },
                {
                    "name": "postFunc",
                    "description": "function that executes after transliteration;\nIt takes a string and returns a string",
                    "type": "Function"
                }
            ],
            "class": "Trans",
            "module": "JsLingua"
        },
        {
            "file": "trans.js",
            "line": 117,
            "description": "add pre- and post-untransliteration functions to a method",
            "itemtype": "method",
            "name": "addUntransPrePostMethods",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "methodName",
                    "description": "the name of the method",
                    "type": "String"
                },
                {
                    "name": "preFunc",
                    "description": "function that executes before untransliteration;\nIt takes a string and returns a string",
                    "type": "Function"
                },
                {
                    "name": "postFunc",
                    "description": "function that executes after untransliteration;\nIt takes a string and returns a string",
                    "type": "Function"
                }
            ],
            "class": "Trans",
            "module": "JsLingua"
        },
        {
            "file": "trans.js",
            "line": 146,
            "description": "Sets the current method to be used for [un]transliteration",
            "itemtype": "method",
            "name": "setCurrentMethod",
            "params": [
                {
                    "name": "methodName",
                    "description": "method's name",
                    "type": "String"
                }
            ],
            "class": "Trans",
            "module": "JsLingua"
        },
        {
            "file": "trans.js",
            "line": 157,
            "description": "Returns the list of available transliteration methods",
            "itemtype": "method",
            "name": "availableMethods",
            "return": {
                "description": "Array of Strings containing methods names",
                "type": "Array"
            },
            "class": "Trans",
            "module": "JsLingua"
        },
        {
            "file": "trans.js",
            "line": 166,
            "description": "gets the language's code",
            "itemtype": "method",
            "name": "getCode",
            "return": {
                "description": "the language's code",
                "type": "String"
            },
            "class": "Trans",
            "module": "JsLingua"
        },
        {
            "file": "trans.js",
            "line": 175,
            "description": "transliterate the text using the current method",
            "itemtype": "method",
            "name": "transliterate",
            "params": [
                {
                    "name": "text",
                    "description": "the untransliterated text (original)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the transliterated text",
                "type": "String"
            },
            "class": "Trans",
            "module": "JsLingua"
        },
        {
            "file": "trans.js",
            "line": 196,
            "description": "untransliterate the text using the current method",
            "itemtype": "method",
            "name": "untransliterate",
            "params": [
                {
                    "name": "text",
                    "description": "translaterated text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "untranslaterated text (original text)",
                "type": "String"
            },
            "class": "Trans",
            "module": "JsLingua"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: override",
            "line": " jpn/jpn.morpho.js:83"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:45"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:63"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:77"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:92"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:114"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:128"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:142"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:162"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:176"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:190"
        },
        {
            "message": "Missing item type\nBootstrap.js by @fat & @mdo\nplugins: bootstrap-transition.js, bootstrap-modal.js, bootstrap-dropdown.js, bootstrap-scrollspy.js, bootstrap-tab.js, bootstrap-tooltip.js, bootstrap-popover.js, bootstrap-affix.js, bootstrap-alert.js, bootstrap-button.js, bootstrap-collapse.js, bootstrap-carousel.js, bootstrap-typeahead.js\nCopyright 2012 Twitter, Inc.\nhttp://www.apache.org/licenses/LICENSE-2.0.txt",
            "line": " docs/docs/assets/vendor/bootstrap/js/bootstrap.min.js:1"
        },
        {
            "message": "Missing item type",
            "line": " jpn/jpn.morpho.js:83"
        },
        {
            "message": "Missing item type\nTo recover the direction of writing for the given language <br>\nThis can be done using the info.js instance of the target language.\nBut, the direction is used a lot for presentation, so a centralized\nversion is to be afforded, so we don't import the js file for each\nlanguage in each webpage.",
            "line": " jslingua.js:115"
        },
        {
            "message": "Missing item type\nThis method is used to recover the name of the tense",
            "line": " morpho.js:289"
        }
    ]
}