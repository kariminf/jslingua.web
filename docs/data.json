{
    "project": {
        "name": "JsLingua API",
        "description": "Language processing API",
        "version": "0.7.0",
        "url": "http://kariminf.github.io/jslingua/"
    },
    "files": {
        "ara/ara.info.js": {
            "name": "ara/ara.info.js",
            "modules": {},
            "classes": {
                "AraInfo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "ara/ara.lang.js": {
            "name": "ara/ara.lang.js",
            "modules": {},
            "classes": {
                "AraLang": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "ara/ara.morpho.js": {
            "name": "ara/ara.morpho.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ara/ara.trans.js": {
            "name": "ara/ara.trans.js",
            "modules": {},
            "classes": {
                "AraTrans": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "eng/eng.info.js": {
            "name": "eng/eng.info.js",
            "modules": {},
            "classes": {
                "EngInfo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "eng/eng.lang.js": {
            "name": "eng/eng.lang.js",
            "modules": {},
            "classes": {
                "EngLang": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "eng/eng.morpho.js": {
            "name": "eng/eng.morpho.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "eng/eng.trans.js": {
            "name": "eng/eng.trans.js",
            "modules": {},
            "classes": {
                "EngTrans": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "fra/fra.info.js": {
            "name": "fra/fra.info.js",
            "modules": {},
            "classes": {
                "FraInfo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "fra/fra.lang.js": {
            "name": "fra/fra.lang.js",
            "modules": {},
            "classes": {
                "FraLang": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "fra/fra.morpho.js": {
            "name": "fra/fra.morpho.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "fra/fra.trans.js": {
            "name": "fra/fra.trans.js",
            "modules": {},
            "classes": {
                "FraTrans": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "jpn/jpn.info.js": {
            "name": "jpn/jpn.info.js",
            "modules": {},
            "classes": {
                "JpnInfo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "jpn/jpn.lang.js": {
            "name": "jpn/jpn.lang.js",
            "modules": {},
            "classes": {
                "JpnLang": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "jpn/jpn.morpho.js": {
            "name": "jpn/jpn.morpho.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "jpn/jpn.trans.js": {
            "name": "jpn/jpn.trans.js",
            "modules": {},
            "classes": {
                "JpnTrans": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "info.js": {
            "name": "info.js",
            "modules": {},
            "classes": {
                "Info": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "jslingua.js": {
            "name": "jslingua.js",
            "modules": {},
            "classes": {
                "JsLingua": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lang.js": {
            "name": "lang.js",
            "modules": {},
            "classes": {
                "Lang": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "morpho.js": {
            "name": "morpho.js",
            "modules": {},
            "classes": {
                "Morpho": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tools.js": {
            "name": "tools.js",
            "modules": {
                "Tools": 1
            },
            "classes": {
                "Tools": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "trans.js": {
            "name": "trans.js",
            "modules": {
                "JsLingua": 1
            },
            "classes": {
                "Trans": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "JsLingua": {
            "name": "JsLingua",
            "submodules": {
                "undefined": 1
            },
            "elements": {},
            "classes": {
                "Trans": 1,
                "AraInfo": 1,
                "AraLang": 1,
                "AraTrans": 1,
                "EngInfo": 1,
                "EngLang": 1,
                "EngTrans": 1,
                "FraInfo": 1,
                "FraLang": 1,
                "FraTrans": 1,
                "JpnInfo": 1,
                "JpnLang": 1,
                "JpnTrans": 1,
                "Info": 1,
                "JsLingua": 1,
                "Lang": 1,
                "Morpho": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "trans.js",
            "line": 100,
            "description": "translateration of the language words"
        },
        "Tools": {
            "name": "Tools",
            "submodules": {},
            "elements": {},
            "classes": {
                "Tools": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "tools.js",
            "line": 6,
            "description": "The tools module"
        }
    },
    "classes": {
        "AraInfo": {
            "name": "AraInfo",
            "shortname": "AraInfo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "ara/ara.info.js",
            "line": 15,
            "description": "Contains information about Arabic language",
            "extends": "Info",
            "is_constructor": 1
        },
        "AraLang": {
            "name": "AraLang",
            "shortname": "AraLang",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "ara/ara.lang.js",
            "line": 15,
            "description": "Contains Arabic charsets and transformations",
            "extends": "Lang",
            "is_constructor": 1
        },
        "AraTrans": {
            "name": "AraTrans",
            "shortname": "AraTrans",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "ara/ara.trans.js",
            "line": 233,
            "description": "Arabic transliteration",
            "extends": "Trans",
            "is_constructor": 1
        },
        "EngInfo": {
            "name": "EngInfo",
            "shortname": "EngInfo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "eng/eng.info.js",
            "line": 15,
            "description": "Contains information about English language",
            "extends": "Info",
            "is_constructor": 1
        },
        "EngLang": {
            "name": "EngLang",
            "shortname": "EngLang",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "eng/eng.lang.js",
            "line": 15,
            "description": "Contains English charsets and transformations",
            "extends": "Lang",
            "is_constructor": 1
        },
        "EngTrans": {
            "name": "EngTrans",
            "shortname": "EngTrans",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "eng/eng.trans.js",
            "line": 72,
            "description": "English transliteration",
            "extends": "Trans",
            "is_constructor": 1
        },
        "FraInfo": {
            "name": "FraInfo",
            "shortname": "FraInfo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "fra/fra.info.js",
            "line": 15,
            "description": "Contains information about French language",
            "extends": "Info",
            "is_constructor": 1
        },
        "FraLang": {
            "name": "FraLang",
            "shortname": "FraLang",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "fra/fra.lang.js",
            "line": 15,
            "description": "Contains French charsets and transformations",
            "extends": "Lang",
            "is_constructor": 1
        },
        "FraTrans": {
            "name": "FraTrans",
            "shortname": "FraTrans",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "fra/fra.trans.js",
            "line": 28,
            "description": "English transliteration",
            "extends": "Trans",
            "is_constructor": 1
        },
        "JpnInfo": {
            "name": "JpnInfo",
            "shortname": "JpnInfo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "jpn/jpn.info.js",
            "line": 16,
            "description": "Contains information about Japanese language",
            "extends": "Info",
            "is_constructor": 1
        },
        "JpnLang": {
            "name": "JpnLang",
            "shortname": "JpnLang",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "jpn/jpn.lang.js",
            "line": 15,
            "description": "Contains Japanese charsets and transformations",
            "extends": "Lang",
            "is_constructor": 1
        },
        "JpnTrans": {
            "name": "JpnTrans",
            "shortname": "JpnTrans",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "jpn/jpn.trans.js",
            "line": 284,
            "description": "Japanese transliteration",
            "extends": "Trans",
            "is_constructor": 1
        },
        "Info": {
            "name": "Info",
            "shortname": "Info",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "file": "info.js",
            "line": 12,
            "description": "Contains information about the specified language",
            "params": [
                {
                    "name": "langCode",
                    "description": "The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.",
                    "type": "String"
                }
            ]
        },
        "JsLingua": {
            "name": "JsLingua",
            "shortname": "JsLingua",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "namespace": "",
            "file": "jslingua.js",
            "line": 17,
            "description": "The main class"
        },
        "Lang": {
            "name": "Lang",
            "shortname": "Lang",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "namespace": "",
            "file": "lang.js",
            "line": 98,
            "description": "Language class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "langCode",
                    "description": "The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.",
                    "type": "String"
                }
            ]
        },
        "Morpho": {
            "name": "Morpho",
            "shortname": "Morpho",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "namespace": "",
            "file": "morpho.js",
            "line": 12,
            "description": "Morphology of a specific language",
            "is_constructor": 1,
            "params": [
                {
                    "name": "langCode",
                    "description": "Language ISO693-2 code: ara, jpn, eng, etc.",
                    "type": "String"
                }
            ]
        },
        "Tools": {
            "name": "Tools",
            "shortname": "Tools",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Tools",
            "namespace": "",
            "file": "tools.js",
            "line": 6,
            "description": "The tools class",
            "static": 1
        },
        "Trans": {
            "name": "Trans",
            "shortname": "Trans",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JsLingua",
            "namespace": "",
            "file": "trans.js",
            "line": 100,
            "description": "translateration of the language words",
            "is_constructor": 1,
            "params": [
                {
                    "name": "langCode",
                    "description": "the code of the language: ara, jpn, etc.",
                    "type": "String"
                }
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "ara/ara.lang.js",
            "line": 72,
            "description": "Transform from Arabic numbers to Arabic letters",
            "itemtype": "method",
            "name": "toArabicLetters",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "nbr",
                    "description": "the integer number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Arabic writing of numbers",
                "type": "String"
            },
            "class": "AraLang"
        },
        {
            "file": "ara/ara.morpho.js",
            "line": 102,
            "description": "A function that gives the pronoun index in conjugation table",
            "itemtype": "method",
            "name": "getPronounIndex",
            "params": [
                {
                    "name": "opts",
                    "description": "contains person, number and gender",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a number from 0 to 13",
                "type": "Number"
            },
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.morpho.js",
            "line": 123,
            "description": "An object to be a midium between different functions",
            "type": "{Object}",
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.morpho.js",
            "line": 128,
            "description": "The verb",
            "type": "{String}",
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.morpho.js",
            "line": 133,
            "description": "The filtered verb",
            "type": "{String}",
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.morpho.js",
            "line": 138,
            "description": "The length of the verb",
            "type": "{Number}",
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.morpho.js",
            "line": 143,
            "description": "Weak beginning",
            "type": "{Boolean}",
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.morpho.js",
            "line": 148,
            "description": "Weak middle",
            "type": "{Boolean}",
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.morpho.js",
            "line": 153,
            "description": "Weak ending",
            "type": "{Boolean}",
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.morpho.js",
            "line": 158,
            "description": "Mudaaf",
            "type": "{Boolean}",
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.morpho.js",
            "line": 577,
            "description": "[conjugate description]",
            "itemtype": "method",
            "name": "conjugate",
            "params": [
                {
                    "name": "verb",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "opts",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.morpho.js",
            "line": 683,
            "description": "Normalizing alif after conjugation",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "conjNormakizeAlif",
            "params": [
                {
                    "name": "verb",
                    "description": "conjugated verb",
                    "type": "String"
                }
            ],
            "return": {
                "description": "verb with alif normalization",
                "type": "String"
            },
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.morpho.js",
            "line": 815,
            "description": "This object is used to save the last weak middle verb and its type.\nThis will optimize the process time when looking for the type of the\nsame used verb.",
            "access": "private",
            "tagname": "",
            "static": 1,
            "type": "{Object}",
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.morpho.js",
            "line": 828,
            "description": "Giving the type of weak middle verb",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "weakMiddleOrigin",
            "params": [
                {
                    "name": "verb",
                    "description": "the verb as introduced by user",
                    "type": "String"
                },
                {
                    "name": "noDiac",
                    "description": "the verb filtered from vocalization, split shadda and split alif madda",
                    "type": "String"
                }
            ],
            "return": {
                "description": "an integer representing the origin of the middle alif:\n<ul>\n<li>0: alif itself</li>\n<li>1: waw</li>\n<li>2: Yaa</li>\n</ul>",
                "type": "Number"
            },
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.morpho.js",
            "line": 864,
            "description": "List of Arabic personal pronouns",
            "access": "private",
            "tagname": "",
            "static": 1,
            "type": "{Array}",
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.morpho.js",
            "line": 880,
            "description": "Normalization method for Arabic: it helps delete vocalization\n* voc: delete vocalization\n* alef: Replace all alef variants with the simple alef\n* ihamza: Replace all beginning hamza variants with the simple alef\n* yeh: Relace the alif maqsorah with yeh\n* teh: Replace teh marbuta with heh\n* _: Delete tatweel",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "word",
                    "description": "the word to be normalized",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "some options (optional) where each language defines its own\nnormalization options",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized word",
                "type": "String"
            },
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.morpho.js",
            "line": 940,
            "description": "A method for Arabic stemming which aims to use regex as much as possible",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "jslinguaAraStemmer",
            "params": [
                {
                    "name": "word",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.trans.js",
            "line": 251,
            "description": "Arabic to morse normalization",
            "itemtype": "method",
            "name": "ar2morseNormalize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "Arabic text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized text",
                "type": "String"
            },
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.trans.js",
            "line": 266,
            "description": "pre-transliteration for morse: cleaning non supported codes",
            "itemtype": "method",
            "name": "morsePreTrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "Arabic text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "processed text for morse transliteration",
                "type": "String"
            },
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.trans.js",
            "line": 284,
            "description": "post-transliteration for morse: clean non morse characters",
            "itemtype": "method",
            "name": "morsePostTrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "morse code",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filtered morse code",
                "type": "String"
            },
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.trans.js",
            "line": 303,
            "description": "pre-untransliteration for morse: clean non morse characters",
            "itemtype": "method",
            "name": "morsePreUntrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "morse code",
                    "type": "String"
                }
            ],
            "return": {
                "description": "processed morse code for untransliteration",
                "type": "String"
            },
            "class": "AraTrans"
        },
        {
            "file": "ara/ara.trans.js",
            "line": 321,
            "description": "post-untransliteration for morse",
            "itemtype": "method",
            "name": "morsePostUntrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "Arabic text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filtered Arabic text",
                "type": "String"
            },
            "class": "AraTrans"
        },
        {
            "file": "eng/eng.lang.js",
            "line": 62,
            "description": "Transform from Arabic numbers to English letters",
            "itemtype": "method",
            "name": "toEnglishLetters",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "nbr",
                    "description": "the integer number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "English writing of numbers",
                "type": "String"
            },
            "class": "EngLang"
        },
        {
            "file": "eng/eng.lang.js",
            "line": 73,
            "description": "Transform from Arabic numbers to English letters",
            "itemtype": "method",
            "name": "toEnglishLetters2",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "nbr",
                    "description": "the integer number",
                    "type": "Number"
                },
                {
                    "name": "comma",
                    "description": "put a comma or not",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "English writing of numbers",
                "type": "String"
            },
            "class": "EngLang"
        },
        {
            "file": "eng/eng.morpho.js",
            "line": 240,
            "description": "Not safe: must be used with isIrregular",
            "itemtype": "method",
            "name": "irregularConj",
            "params": [
                {
                    "name": "verb",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "idx",
                    "description": "0 for past, 1 for past participle",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "EngTrans"
        },
        {
            "file": "eng/eng.morpho.js",
            "line": 854,
            "description": "Transforms a singular noun to plural",
            "itemtype": "method",
            "name": "singular2plural",
            "params": [
                {
                    "name": "noun",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "EngTrans"
        },
        {
            "file": "eng/eng.trans.js",
            "line": 88,
            "description": "pre-transliteration for morse: cleaning non supported codes",
            "itemtype": "method",
            "name": "morsePreTrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "Arabic text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "processed text for morse transliteration",
                "type": "String"
            },
            "class": "EngTrans"
        },
        {
            "file": "eng/eng.trans.js",
            "line": 104,
            "description": "post-transliteration for morse: clean non morse characters",
            "itemtype": "method",
            "name": "morsePostTrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "morse code",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filtered morse code",
                "type": "String"
            },
            "class": "EngTrans"
        },
        {
            "file": "eng/eng.trans.js",
            "line": 123,
            "description": "pre-untransliteration for morse: clean non morse characters",
            "itemtype": "method",
            "name": "morsePreUntrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "morse code",
                    "type": "String"
                }
            ],
            "return": {
                "description": "processed morse code for untransliteration",
                "type": "String"
            },
            "class": "EngTrans"
        },
        {
            "file": "eng/eng.trans.js",
            "line": 141,
            "description": "post-untransliteration for morse",
            "itemtype": "method",
            "name": "morsePostUntrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "Arabic text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filtered Arabic text",
                "type": "String"
            },
            "class": "EngTrans"
        },
        {
            "file": "fra/fra.lang.js",
            "line": 72,
            "description": "Transform from Arabic numbers to English letters",
            "itemtype": "method",
            "name": "toFrenchLetters",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "nbr",
                    "description": "the integer number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "French writing of numbers",
                "type": "String"
            },
            "class": "FraLang"
        },
        {
            "file": "fra/fra.morpho.js",
            "line": 175,
            "description": "Each language has a conjugation table model.\nFor example, in English, Arabic and French, we put pronouns in rows.\nAs for Japanese, the conjugation doesn't follow that pattern.",
            "itemtype": "method",
            "name": "getConjugModel",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "FraTrans"
        },
        {
            "file": "fra/fra.morpho.js",
            "line": 586,
            "description": "Verbs of goup 1 which ends with either eler or eter; and don't\ndouble the t or l when meeting a silent e in conjugation \\\\\nSource: http://www.ortholud.com/code/les-verbes.php?terminaison=eler,%20eter",
            "type": "{Object}",
            "class": "FraTrans"
        },
        {
            "file": "fra/fra.morpho.js",
            "line": 599,
            "description": "An object to be a midium between different functions",
            "type": "{Object}",
            "class": "FraTrans"
        },
        {
            "file": "fra/fra.morpho.js",
            "line": 604,
            "description": "The verb",
            "type": "{String}",
            "class": "FraTrans"
        },
        {
            "file": "fra/fra.morpho.js",
            "line": 609,
            "description": "The group of the verb",
            "type": "{Number}",
            "class": "FraTrans"
        },
        {
            "file": "fra/fra.morpho.js",
            "line": 616,
            "description": "Get the verbs group: 1, 2 or 3. You have to verify for irregular verbs:\nêtre, avoir, aller; Since they are not considered here.",
            "itemtype": "method",
            "name": "getVerbGroupe",
            "params": [
                {
                    "name": "verb",
                    "description": "the verb",
                    "type": "String"
                }
            ],
            "class": "FraTrans"
        },
        {
            "file": "fra/fra.morpho.js",
            "line": 743,
            "description": "A function that gives the pronoun index in conjugation table",
            "itemtype": "method",
            "name": "getPronounIndex",
            "params": [
                {
                    "name": "opts",
                    "description": "contains person and number",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a number from 0 to 5",
                "type": "Number"
            },
            "class": "FraTrans"
        },
        {
            "file": "fra/fra.morpho.js",
            "line": 798,
            "description": "A function which returns the past infinitive of a verb <br>\nFunction prerequisite: verbGroup(verb)",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getVerbPastParticipal",
            "return": {
                "description": "the past infinitive of the verb",
                "type": "String"
            },
            "class": "FraTrans"
        },
        {
            "file": "jpn/jpn.lang.js",
            "line": 55,
            "description": "Transform from Arabic numbers to Japanese letters",
            "itemtype": "method",
            "name": "toJapaneseLetters",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "num",
                    "description": "the integer number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Japanese writing of numbers",
                "type": "String"
            },
            "class": "JpnLang"
        },
        {
            "file": "jpn/jpn.morpho.js",
            "line": 181,
            "description": "[basicForm description]",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "basicForm",
            "params": [
                {
                    "name": "verb",
                    "description": "[description]",
                    "type": "String"
                },
                {
                    "name": "sound",
                    "description": "[description]",
                    "type": "Array"
                },
                {
                    "name": "vtype",
                    "description": "[description]",
                    "type": "String"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "String"
            },
            "class": "JpnTrans"
        },
        {
            "file": "jpn/jpn.morpho.js",
            "line": 556,
            "description": "Normalizes Japanese words",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "word",
                    "description": "a word to be normalized",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "For the time being, no options for Japanese",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "normalized ord",
                "type": "String"
            },
            "class": "JpnTrans"
        },
        {
            "file": "jpn/jpn.trans.js",
            "line": 449,
            "description": "kunreiShiki pre-transliteration function",
            "itemtype": "method",
            "name": "kunreiShikiPreTrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "Japanese text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Pre-tranliterated text",
                "type": "String"
            },
            "class": "JpnTrans"
        },
        {
            "file": "jpn/jpn.trans.js",
            "line": 463,
            "description": "kunreiShiki pre-untransliteration function",
            "itemtype": "method",
            "name": "kunreiShikiPreUntrans",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "Romanized text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Pre-untranliterated text",
                "type": "String"
            },
            "class": "JpnTrans"
        },
        {
            "file": "jpn/jpn.trans.js",
            "line": 478,
            "description": "Replace the doubled characters with a little \"tsu\" if different from \"n\"",
            "itemtype": "method",
            "name": "doubleReplace",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "The text to be replaced",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The same string but the repeated characters are replaced",
                "type": "String"
            },
            "class": "JpnTrans"
        },
        {
            "file": "jpn/jpn.trans.js",
            "line": 502,
            "description": "Transform xya to Japanese little 'tsu' followed by ya",
            "itemtype": "method",
            "name": "xya2Jap",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "Romanized text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "text with xya transformed to Japanese",
                "type": "String"
            },
            "class": "JpnTrans"
        },
        {
            "file": "jpn/jpn.trans.js",
            "line": 528,
            "description": "Replace the lone characters with their equivalent + \"u\"",
            "itemtype": "method",
            "name": "loneCharReplace",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "the text to be replaced",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The resulted text",
                "type": "String"
            },
            "class": "JpnTrans"
        },
        {
            "file": "info.js",
            "line": 44,
            "description": "Get the name of the language",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "the language name: arabic, english, japanese, etc.",
                "type": "String"
            },
            "class": "Info"
        },
        {
            "file": "info.js",
            "line": 53,
            "description": "Get the code of the language",
            "itemtype": "method",
            "name": "getCode",
            "return": {
                "description": "The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.",
                "type": "String"
            },
            "class": "Info"
        },
        {
            "file": "info.js",
            "line": 62,
            "description": "Get the family of the language",
            "itemtype": "method",
            "name": "getFamily",
            "return": {
                "description": "The language family: Afro-asiatic, Japonic, etc.",
                "type": "String"
            },
            "class": "Info"
        },
        {
            "file": "info.js",
            "line": 71,
            "description": "Get the branch of the language, if any",
            "itemtype": "method",
            "name": "getBranch",
            "return": {
                "description": "The language branch: semitic, etc.",
                "type": "String"
            },
            "class": "Info"
        },
        {
            "file": "info.js",
            "line": 80,
            "description": "Get the direction of writing of the language: ltr or rtl",
            "itemtype": "method",
            "name": "getDir",
            "return": {
                "description": "The language direction: left to right (ltr) or right to left (rtl)",
                "type": "String"
            },
            "class": "Info"
        },
        {
            "file": "info.js",
            "line": 89,
            "description": "Get the words order:\n<ul>\n<li>s: Subject</li>\n<li>v: Verb</li>\n<li>o: Object</li>\n</ul>\nFor example, English is \"svo\"",
            "itemtype": "method",
            "name": "getWordOrder",
            "return": {
                "description": "The words order in the language",
                "type": "String"
            },
            "class": "Info"
        },
        {
            "file": "jslingua.js",
            "line": 54,
            "description": "Contains the super-classes: Info, Lang, Trans, Morpho. <br>\nfor example, JsLingua.Cls.Info returns Info class",
            "itemtype": "attribute",
            "name": "Cls",
            "static": 1,
            "type": "{Object}",
            "class": "JsLingua",
            "module": "JsLingua"
        },
        {
            "file": "jslingua.js",
            "line": 76,
            "description": "Add a service for a specific language",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "addService",
            "params": [
                {
                    "name": "serviceID",
                    "description": "The services name: \"Info\", \"Lang\", etc.",
                    "type": "String"
                },
                {
                    "name": "langCode",
                    "description": "The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.",
                    "type": "String"
                },
                {
                    "name": "theClass",
                    "description": "The class that affords the service",
                    "type": "Object"
                }
            ],
            "class": "JsLingua",
            "module": "JsLingua"
        },
        {
            "file": "jslingua.js",
            "line": 94,
            "description": "Get the codes of available languages of a given service",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "serviceLanguages",
            "params": [
                {
                    "name": "serviceID",
                    "description": "The name of the service (the super-classe): \"Info\", \"Lang\", etc.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array of strings, with ISO639-2 codes",
                "type": "Array"
            },
            "class": "JsLingua",
            "module": "JsLingua"
        },
        {
            "file": "jslingua.js",
            "line": 107,
            "description": "Get the service class for a given language and service name.<br>\nFor example: JsLingua.getService(\"Info\", \"ara\") Gives a class AraInfo",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "getService",
            "params": [
                {
                    "name": "serviceID",
                    "description": "The name of the service (the super-classe): \"Info\", \"Lang\", etc.",
                    "type": "String"
                },
                {
                    "name": "langCode",
                    "description": "The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The class that affords the service",
                "type": "Object"
            },
            "class": "JsLingua",
            "module": "JsLingua"
        },
        {
            "file": "jslingua.js",
            "line": 123,
            "description": "[getVersion description]",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "getVersion",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "JsLingua",
            "module": "JsLingua"
        },
        {
            "file": "jslingua.js",
            "line": 134,
            "description": "To recover the direction of writing for the given language <br>\nThis can be done using the info.js instance of the target language.\nBut, the direction is used a lot for presentation, so a centralized\nversion is to be afforded, so we don't import the js file for each\nlanguage in each webpage.",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "getDir",
            "params": [
                {
                    "name": "langCode",
                    "description": "The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "either \"rtl\" or \"ltr\"",
                "type": "String"
            },
            "class": "JsLingua",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 12,
            "description": "Returns unicode",
            "itemtype": "method",
            "name": "getUnicode",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "char",
                    "description": "a character or a unicode int",
                    "type": "String, Number"
                }
            ],
            "return": {
                "description": "returns the same number or the unicode of the first character",
                "type": "Number"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 30,
            "description": "Returns another method to verify if a character's unicode is between\ntwo unicode numbers min and max",
            "itemtype": "method",
            "name": "isBetween",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "min",
                    "description": "minimum unicode (included)",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "maximum unicode (included)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "function with char as parameter and returns a boolean",
                "type": "Function"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 68,
            "description": "transformation Function, returns another function that transforms a text",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "transform",
            "params": [
                {
                    "name": "opts",
                    "description": "a list of objects, where each object is:\n    {\n       offset: the offset of transformation\n       found: the function that verifies if the char can be transformed\n    }",
                    "type": "Array[object]"
                }
            ],
            "return": {
                "description": "function witch transforms a text using the afforded offsets",
                "type": "Function"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 117,
            "description": "Add char sets of a language",
            "itemtype": "method",
            "name": "addCharSet",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "setName",
                    "description": "CharSet name, for example: hiragana, kanji, Arabic suppliment",
                    "type": "String"
                },
                {
                    "name": "begin",
                    "description": "integer value: begining of the charSet",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "integer value: end of the charSet",
                    "type": "Number"
                }
            ],
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 130,
            "description": "Creates a new transformation method",
            "itemtype": "method",
            "name": "addTransform",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "transName",
                    "description": "transformation name (function name), for example: hiragana2Katakana",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "Array of options such as\n   {//If the charset exists and we use all of it\n      setName: \"<name of the charset\",\n      offset: <number>\n   },\n   {//otherwise\n      begin: <number>,\n      end: <number>,\n      offset: <number>\n   }",
                    "type": "Array[object]"
                }
            ],
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 179,
            "description": "Returns the available charsets for the current language",
            "itemtype": "method",
            "name": "availableCharSets",
            "return": {
                "description": "a set of strings containing the names of charsets",
                "type": "Array"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 188,
            "description": "Returns the available transformations for the current language",
            "itemtype": "method",
            "name": "availableTransformations",
            "return": {
                "description": "a set of strings containing the names of transformation functions",
                "type": "Array"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 197,
            "description": "Returns the transformation function",
            "itemtype": "method",
            "name": "transformationFunction",
            "params": [
                {
                    "name": "transName",
                    "description": "transformation name (function name), for example: hiragana2Katakana",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a function which takes a string and transforme it to another string with different charset",
                "type": "Function"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 211,
            "description": "Returns a function which verifies if a char belongs to a charset or not",
            "itemtype": "method",
            "name": "verifyCharSetFunction",
            "params": [
                {
                    "name": "setName",
                    "description": "CharSet name, for example: hiragana, kanji, Arabic suppliment",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A function which takes a char and returns true if it belongs to the charset",
                "type": "Function"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 225,
            "description": "Returns a function which verifies if a string contains at least one character which belongs to a charset",
            "itemtype": "method",
            "name": "containsCharSetFunction",
            "params": [
                {
                    "name": "setName",
                    "description": "CharSet name, for example: hiragana, kanji, Arabic suppliment",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A function which takes a string and returns true if one of its characters belongs to the charset",
                "type": "Function"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 235,
            "description": "Returns a function which verifies if all string's characters belong to a charset",
            "itemtype": "method",
            "name": "allCharSetFunction",
            "params": [
                {
                    "name": "setName",
                    "description": "CharSet name, for example: hiragana, kanji, Arabic suppliment",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A function which takes a string and returns true if all of its characters belong to the charset",
                "type": "Function"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 245,
            "description": "Returns the code of the language",
            "itemtype": "method",
            "name": "getCode",
            "return": {
                "description": "The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.",
                "type": "String"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "lang.js",
            "line": 254,
            "description": "A function which returns the pronounciation of a number in the destination\nlanguage (this must be overriden)",
            "itemtype": "method",
            "name": "pronounceNumber",
            "params": [
                {
                    "name": "num",
                    "description": "A number to be transformed into letters",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the pronounciation",
                "type": "String"
            },
            "class": "Lang",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 32,
            "description": "A debugging function which do nothing",
            "itemtype": "method",
            "name": "dummyDebug",
            "access": "private",
            "tagname": "",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 39,
            "description": "A debugging function which pushes the arguments to the cosoles log",
            "itemtype": "method",
            "name": "realDebug",
            "access": "private",
            "tagname": "",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 48,
            "description": "The part of speech: Noun, Verb, Adjective,\nAdverb, Preposition, Pronoun",
            "access": "Morpho.Feature.POS",
            "itemtype": "attribute",
            "name": "PoS",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 66,
            "description": "The tense: Past, Present, Future",
            "access": "Morpho.Feature.Tense",
            "itemtype": "attribute",
            "name": "Tense",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 80,
            "description": "The aspect: Simple, Continuous, Perfect, PerfectContinuous",
            "access": "Morpho.Feature.Aspect",
            "itemtype": "attribute",
            "name": "Aspect",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 96,
            "description": "The mood: indicative, subjunctive, conditional,\noptative, imperative, jussive, potential,\nhypothetical, inferential",
            "see": [
                "http://universaldependencies.org/u/feat/Mood.html"
            ],
            "access": "Morpho.Feature.Mood",
            "itemtype": "attribute",
            "name": "Mood",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 109,
            "description": "The indicative can be considered the default mood.\nA verb in indicative merely states that something happens,\nhas happened or will happen, without adding any attitude of the speaker.",
            "example": [
                " You study at the university"
            ],
            "type": "{String}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 118,
            "description": "The speaker uses imperative to order or ask the addressee to do the action of the verb.",
            "example": [
                " Study at the university"
            ],
            "type": "{String}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 125,
            "description": "The conditional mood is used to express actions that would have taken\nplace under some circumstances but they actually did not / do not happen.\nGrammars of some languages may classify conditional as tense (rather than mood)\nbut e.g. in Czech it combines with two different tenses (past and present).",
            "example": [
                " if she went home"
            ],
            "type": "{String}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 135,
            "description": "The action of the verb is possible but not certain.\nThis mood corresponds to the modal verbs can, might, be able to. Used e.g. in Finnish.",
            "example": [
                " she can go home"
            ],
            "type": "{String}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 143,
            "description": "The subjunctive mood is used under certain circumstances in subordinate clauses,\ntypically for actions that are subjective or otherwise uncertain.\nIn German, it may be also used to convey the conditional meaning.",
            "example": [
                " \"Je veux que tu le fasses\": I want that you to do it"
            ],
            "type": "{String}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 152,
            "description": "The jussive mood expresses the desire that the action happens;\nit is thus close to both imperative and optative.\nUnlike in desiderative, it is the speaker, not the subject who wishes that it happens.\nUsed e.g. in Arabic.",
            "example": [
                " فليكن let it be"
            ],
            "type": "{String}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 162,
            "description": "Means “in order to”, occurs in Amazonian languages.",
            "type": "{String}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 168,
            "description": "The quotative mood is used e.g. in Estonian to denote direct speech.",
            "type": "{String}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 174,
            "description": "Expresses exclamations like “May you have a long life!” or\n“If only I were rich!” In Turkish it also expresses suggestions.",
            "example": [
                " let’s go home"
            ],
            "type": "{String}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 182,
            "description": "The desiderative mood corresponds to the modal verb “want to”:\n“He wants to come.” Used e.g. in Turkish.",
            "type": "{String}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 189,
            "description": "The necessitative mood expresses necessity and corresponds to the modal\nverbs “must, should, have to”: “He must come.”",
            "type": "{String}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 196,
            "description": "Expresses surprise, irony or doubt. Occurs in Albanian,\nother Balkan languages, and in Caddo (Native American from Oklahoma).",
            "type": "{String}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 205,
            "description": "The voice: Active,Passive, Middle",
            "access": "Morpho.Feature.Voice",
            "itemtype": "attribute",
            "name": "Voice",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 219,
            "description": "The grammatical number: Singular, Dual, Plural",
            "access": "Morpho.Feature.Number",
            "itemtype": "attribute",
            "name": "GNumber",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 233,
            "description": "The person: First, Second, Third.",
            "access": "Morpho.Feature.Person",
            "itemtype": "attribute",
            "name": "Person",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 247,
            "description": "The gender: Masculine, Feminine, Neuter.",
            "access": "Morpho.Feature.Gender",
            "itemtype": "attribute",
            "name": "Gender",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 261,
            "description": "This is a map to different morphology features:\n<ul>\n<li>POS</li>\n<li>Tense</li>\n<li>Aspect</li>\n<li>Mood</li>\n<li>Voice</li>\n<li>Number: It returns <a href=\"#attr_Num\">Num</a></li>\n<li>Case: It returns <a href=\"#attr_Case\">Case</a></li>\n<li>Person: It returns <a href=\"#attr_Person\">Person</a></li>\n<li>Gender: It returns <a href=\"#attr_Gender\">Gender</a></li>\n</ul>\nWe can access these features either by:<br>\nMorpho.Feature.feature_name <br>\nOr: <br>\nMorpho.Feature[\"feature_name\"]",
            "itemtype": "attribute",
            "name": "Feature",
            "access": "Morpho.Feature",
            "readonly": "",
            "static": 1,
            "type": "{object}",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 313,
            "description": "Add new stemmer method",
            "itemtype": "method",
            "name": "newStemmer",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "stemmerName",
                    "description": "the name of the stemmer",
                    "type": "String"
                },
                {
                    "name": "stemmerDesc",
                    "description": "the description of the stemmer",
                    "type": "String"
                },
                {
                    "name": "stemmerFct",
                    "description": "the function stem(word)",
                    "type": "Function"
                }
            ],
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 335,
            "description": "Enables the debugging messages",
            "itemtype": "method",
            "name": "enableDebug",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 343,
            "description": "disables the debugging messages",
            "itemtype": "method",
            "name": "disableDebug",
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 351,
            "description": "Sets the current stemmer",
            "final": 1,
            "itemtype": "method",
            "name": "setCurrentStemmer",
            "params": [
                {
                    "name": "StemmerName",
                    "description": "stemmer method's name",
                    "type": "String"
                }
            ],
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 364,
            "description": "Returns the list of available stemming methods",
            "final": 1,
            "itemtype": "method",
            "name": "availableStemmers",
            "return": {
                "description": "Array of Strings containing stemmers names",
                "type": "Array"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 374,
            "description": "This method is used to recover the name of the tense",
            "params": [
                {
                    "name": "tense",
                    "description": "the tense which we want to get the name",
                    "type": "Tense"
                }
            ],
            "return": {
                "description": "the name of the tense in the selected language",
                "type": "String"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 392,
            "description": "Returns a list of verb types",
            "abstract": "",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getVerbTypes",
            "return": {
                "description": "[description]",
                "type": "Array"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 403,
            "description": "Given a verb, it detects its type",
            "abstract": "",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getVerbType",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 414,
            "description": "This function returns an object of available conjugation forms\n```\n{\n \"form_name\": {opts}\n}\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getForms",
            "return": {
                "description": "Array of tenses available for the language",
                "type": "Array"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 447,
            "description": "Each language has a conjugation table model.\nFor example, in English, Arabic and French, we put pronouns in rows.\nAs for Japanese, the conjugation doesn't follow that pattern.",
            "itemtype": "method",
            "name": "getConjugModel",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 463,
            "description": "[getOptLists description]",
            "itemtype": "method",
            "name": "getOptLists",
            "params": [
                {
                    "name": "optLabel",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 489,
            "description": "[getNegationOpts description]",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "getNegationOpts",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 502,
            "description": "[getNegationName description]",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "getNegationName",
            "params": [
                {
                    "name": "opts",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 515,
            "description": "[getVoiceOpts description]",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "getVoiceOpts",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 528,
            "description": "[getVoiceName description]",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "getVoiceName",
            "params": [
                {
                    "name": "opts",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 545,
            "description": "[getPronounOpts description]",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "getPronounOpts",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 555,
            "description": "[getPronounName description]",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "getPronounName",
            "params": [
                {
                    "name": "opts",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 567,
            "description": "This function is used for verb conjugation",
            "itemtype": "method",
            "name": "conjugate",
            "params": [
                {
                    "name": "verb",
                    "description": "the word to be conjugated",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "options for tense, case, voice, aspect, person, number, gender, mood, and other",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "inflected word",
                "type": "String"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 580,
            "description": "Get the personal pronoun using options like: person, gender, etc.<br>\nfor example, the parameters for the personal pronoun \"I\": <br>\n```\n   {\n     person: Morpho.Feature.Person.First,\n     number: Morpho.Feature.Number.Singular\n   }\n```",
            "itemtype": "method",
            "name": "getPronounName",
            "params": [
                {
                    "name": "opts",
                    "description": "An object containing parameters: person, gender, number.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the pronoun",
                "type": "String"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 597,
            "description": "Returns a function for declension",
            "itemtype": "method",
            "name": "nounDeclensionFunction",
            "params": [
                {
                    "name": "declenseName",
                    "description": "the name of the function",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a function which takes a noun as a parameter",
                "type": "Function"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 611,
            "description": "Add a noun declension function",
            "itemtype": "method",
            "name": "addNounDeclension",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the function",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "a function which takes a noun as parameter and returns a declensed one",
                    "type": "Function"
                }
            ],
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 624,
            "description": "Returns a list of noun declension functions",
            "itemtype": "method",
            "name": "availableNounDeclensions",
            "return": {
                "description": "A list of declense functions names",
                "type": "String"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 633,
            "description": "Stem a word: delete prefixes, suffixes and infixes",
            "itemtype": "method",
            "name": "stem",
            "params": [
                {
                    "name": "word",
                    "description": "the word to be stemmed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "stemmed word",
                "type": "String"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 646,
            "description": "Normalization method, used to delete non used chars or to replace some with others, etc.",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "word",
                    "description": "the word to be normalized",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "some options (optional) where each language defines its own\nnormalization options",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized word",
                "type": "String"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 662,
            "description": "[parseConjModelBranch description]",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "parseConjModelBranch",
            "params": [
                {
                    "name": "morpho",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "branch",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "morpho.js",
            "line": 705,
            "description": "[parseConjModel description]",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "parseConjModel",
            "params": [
                {
                    "name": "morpho",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "Morpho",
            "module": "JsLingua"
        },
        {
            "file": "tools.js",
            "line": 12,
            "description": "Read morse code and output as sound <br>\nExample: readMorse(\"..-. .--   ..-.\");",
            "itemtype": "method",
            "name": "readMorse",
            "params": [
                {
                    "name": "morse",
                    "description": "morse code written using \".\", \"-\" and blacks \" \".",
                    "type": "String"
                }
            ],
            "class": "Tools",
            "module": "Tools"
        },
        {
            "file": "tools.js",
            "line": 61,
            "description": "Transform HTML reserved characters to their equivalent codes in HTML.<br>\nfor example: \"<\" is transformed to \"&lt;\".",
            "itemtype": "method",
            "name": "htmlEntities",
            "params": [
                {
                    "name": "str",
                    "description": "normal string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "skip string",
                "type": "String"
            },
            "class": "Tools",
            "module": "Tools"
        },
        {
            "file": "trans.js",
            "line": 80,
            "description": "This function returns another function which do the transformation",
            "itemtype": "method",
            "name": "getTransliterator",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "srcTbl",
                    "description": "array which contains the source strings",
                    "type": "Array"
                },
                {
                    "name": "dstTbl",
                    "description": "array which contains the destination strings",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "a function which takes a string and transforme it using\nsrcTbl and dstTbl",
                "type": "Function"
            },
            "class": "Trans",
            "module": "Tools"
        },
        {
            "file": "trans.js",
            "line": 123,
            "description": "Add new transliteration method using two parallele tables",
            "itemtype": "method",
            "name": "newMethod",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "methodName",
                    "description": "the name of the method",
                    "type": "String"
                },
                {
                    "name": "langTbl",
                    "description": "array of strigs, the languages characters",
                    "type": "Array"
                },
                {
                    "name": "transTbl",
                    "description": "array of strigs, their respective representations",
                    "type": "Array"
                }
            ],
            "class": "Trans",
            "module": "JsLingua"
        },
        {
            "file": "trans.js",
            "line": 148,
            "description": "Set transliteration methods directly",
            "itemtype": "method",
            "name": "setTransUntrasMethods",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "methodName",
                    "description": "the name of the method",
                    "type": "String"
                },
                {
                    "name": "trans",
                    "description": "function of transliteration",
                    "type": "Function"
                },
                {
                    "name": "untrans",
                    "description": "function of untransliteration",
                    "type": "Function"
                }
            ],
            "class": "Trans",
            "module": "JsLingua"
        },
        {
            "file": "trans.js",
            "line": 171,
            "description": "add pre- and post-transliteration functions to a method",
            "itemtype": "method",
            "name": "addTransPrePostMethods",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "methodName",
                    "description": "the name of the method",
                    "type": "String"
                },
                {
                    "name": "preFunc",
                    "description": "function that executes before transliteration;\nIt takes a string and returns a string",
                    "type": "Function"
                },
                {
                    "name": "postFunc",
                    "description": "function that executes after transliteration;\nIt takes a string and returns a string",
                    "type": "Function"
                }
            ],
            "class": "Trans",
            "module": "JsLingua"
        },
        {
            "file": "trans.js",
            "line": 193,
            "description": "add pre- and post-untransliteration functions to a method",
            "itemtype": "method",
            "name": "addUntransPrePostMethods",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "methodName",
                    "description": "the name of the method",
                    "type": "String"
                },
                {
                    "name": "preFunc",
                    "description": "function that executes before untransliteration;\nIt takes a string and returns a string",
                    "type": "Function"
                },
                {
                    "name": "postFunc",
                    "description": "function that executes after untransliteration;\nIt takes a string and returns a string",
                    "type": "Function"
                }
            ],
            "class": "Trans",
            "module": "JsLingua"
        },
        {
            "file": "trans.js",
            "line": 222,
            "description": "Sets the current method to be used for [un]transliteration",
            "itemtype": "method",
            "name": "setCurrentMethod",
            "params": [
                {
                    "name": "methodName",
                    "description": "method's name",
                    "type": "String"
                }
            ],
            "class": "Trans",
            "module": "JsLingua"
        },
        {
            "file": "trans.js",
            "line": 233,
            "description": "Returns the list of available transliteration methods",
            "itemtype": "method",
            "name": "availableMethods",
            "return": {
                "description": "Array of Strings containing methods names",
                "type": "Array"
            },
            "class": "Trans",
            "module": "JsLingua"
        },
        {
            "file": "trans.js",
            "line": 242,
            "description": "gets the language's code",
            "itemtype": "method",
            "name": "getCode",
            "return": {
                "description": "the language's code",
                "type": "String"
            },
            "class": "Trans",
            "module": "JsLingua"
        },
        {
            "file": "trans.js",
            "line": 251,
            "description": "transliterate the text using the current method",
            "itemtype": "method",
            "name": "transliterate",
            "params": [
                {
                    "name": "text",
                    "description": "the untransliterated text (original)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the transliterated text",
                "type": "String"
            },
            "class": "Trans",
            "module": "JsLingua"
        },
        {
            "file": "trans.js",
            "line": 272,
            "description": "untransliterate the text using the current method",
            "itemtype": "method",
            "name": "untransliterate",
            "params": [
                {
                    "name": "text",
                    "description": "translaterated text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "untranslaterated text (original text)",
                "type": "String"
            },
            "class": "Trans",
            "module": "JsLingua"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: access",
            "line": " morpho.js:48"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:66"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:80"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:96"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:205"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:219"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:233"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:247"
        },
        {
            "message": "unknown tag: access",
            "line": " morpho.js:261"
        },
        {
            "message": "unknown tag: abstract",
            "line": " morpho.js:392"
        },
        {
            "message": "unknown tag: abstract",
            "line": " morpho.js:403"
        },
        {
            "message": "Missing item type\nAn object to be a midium between different functions",
            "line": " ara/ara.morpho.js:123"
        },
        {
            "message": "Missing item type\nThe verb",
            "line": " ara/ara.morpho.js:128"
        },
        {
            "message": "Missing item type\nThe filtered verb",
            "line": " ara/ara.morpho.js:133"
        },
        {
            "message": "Missing item type\nThe length of the verb",
            "line": " ara/ara.morpho.js:138"
        },
        {
            "message": "Missing item type\nWeak beginning",
            "line": " ara/ara.morpho.js:143"
        },
        {
            "message": "Missing item type\nWeak middle",
            "line": " ara/ara.morpho.js:148"
        },
        {
            "message": "Missing item type\nWeak ending",
            "line": " ara/ara.morpho.js:153"
        },
        {
            "message": "Missing item type\nMudaaf",
            "line": " ara/ara.morpho.js:158"
        },
        {
            "message": "Missing item type\nThis object is used to save the last weak middle verb and its type.\nThis will optimize the process time when looking for the type of the\nsame used verb.",
            "line": " ara/ara.morpho.js:815"
        },
        {
            "message": "Missing item type\nList of Arabic personal pronouns",
            "line": " ara/ara.morpho.js:864"
        },
        {
            "message": "Missing item type\nVerbs of goup 1 which ends with either eler or eter; and don't\ndouble the t or l when meeting a silent e in conjugation \\\\\nSource: http://www.ortholud.com/code/les-verbes.php?terminaison=eler,%20eter",
            "line": " fra/fra.morpho.js:586"
        },
        {
            "message": "Missing item type\nAn object to be a midium between different functions",
            "line": " fra/fra.morpho.js:599"
        },
        {
            "message": "Missing item type\nThe verb",
            "line": " fra/fra.morpho.js:604"
        },
        {
            "message": "Missing item type\nThe group of the verb",
            "line": " fra/fra.morpho.js:609"
        },
        {
            "message": "Missing item type\nThe indicative can be considered the default mood.\nA verb in indicative merely states that something happens,\nhas happened or will happen, without adding any attitude of the speaker.",
            "line": " morpho.js:109"
        },
        {
            "message": "Missing item type\nThe speaker uses imperative to order or ask the addressee to do the action of the verb.",
            "line": " morpho.js:118"
        },
        {
            "message": "Missing item type\nThe conditional mood is used to express actions that would have taken\nplace under some circumstances but they actually did not / do not happen.\nGrammars of some languages may classify conditional as tense (rather than mood)\nbut e.g. in Czech it combines with two different tenses (past and present).",
            "line": " morpho.js:125"
        },
        {
            "message": "Missing item type\nThe action of the verb is possible but not certain.\nThis mood corresponds to the modal verbs can, might, be able to. Used e.g. in Finnish.",
            "line": " morpho.js:135"
        },
        {
            "message": "Missing item type\nThe subjunctive mood is used under certain circumstances in subordinate clauses,\ntypically for actions that are subjective or otherwise uncertain.\nIn German, it may be also used to convey the conditional meaning.",
            "line": " morpho.js:143"
        },
        {
            "message": "Missing item type\nThe jussive mood expresses the desire that the action happens;\nit is thus close to both imperative and optative.\nUnlike in desiderative, it is the speaker, not the subject who wishes that it happens.\nUsed e.g. in Arabic.",
            "line": " morpho.js:152"
        },
        {
            "message": "Missing item type\nMeans “in order to”, occurs in Amazonian languages.",
            "line": " morpho.js:162"
        },
        {
            "message": "Missing item type\nThe quotative mood is used e.g. in Estonian to denote direct speech.",
            "line": " morpho.js:168"
        },
        {
            "message": "Missing item type\nExpresses exclamations like “May you have a long life!” or\n“If only I were rich!” In Turkish it also expresses suggestions.",
            "line": " morpho.js:174"
        },
        {
            "message": "Missing item type\nThe desiderative mood corresponds to the modal verb “want to”:\n“He wants to come.” Used e.g. in Turkish.",
            "line": " morpho.js:182"
        },
        {
            "message": "Missing item type\nThe necessitative mood expresses necessity and corresponds to the modal\nverbs “must, should, have to”: “He must come.”",
            "line": " morpho.js:189"
        },
        {
            "message": "Missing item type\nExpresses surprise, irony or doubt. Occurs in Albanian,\nother Balkan languages, and in Caddo (Native American from Oklahoma).",
            "line": " morpho.js:196"
        },
        {
            "message": "Missing item type\nThis method is used to recover the name of the tense",
            "line": " morpho.js:374"
        }
    ]
}